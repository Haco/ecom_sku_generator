<?php

namespace S3b0\EcomSkuGenerator\User\ModifyTCA;

/***************************************************************
 *
 *  Copyright notice
 *
 *  (c) 2015 Sebastian Iffland <Sebastian.Iffland@ecom-ex.com>, ecom instruments GmbH
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/
use S3b0\EcomConfigCodeGenerator\Setup;
use TYPO3\CMS\Backend\Form\Utility\FormEngineUtility;
use TYPO3\CMS\Backend\Utility as BackendUtility;
use TYPO3\CMS\Core\Utility as CoreUtility;

/**
 * Class ModifyTCA
 * @package S3b0\EcomSkuGenerator\User\ModifyTCA
 */
class ModifyTCA {

	/**
	 * @param array $PA
	 * @param \TYPO3\CMS\Backend\Form\FormEngine|\TYPO3\CMS\Backend\Form\Element\UserElement $pObj
	 *
	 * @internal
	 * @return string
	 */
	public function selectPartsUserField(array &$PA, $pObj) {
		if ( !$PA['row']['content'] ) {
			return '';
		}
		$selItems = [ ];
		$db = $this->getDatabaseConnection();
		$addWhere = ("
			NOT tx_ecomskugenerator_domain_model_part.deleted
			AND tx_ecomskugenerator_domain_model_part.sys_language_uid IN (-1,0)
			AND (
				SELECT content FROM tx_ecomskugenerator_domain_model_partgroup WHERE tx_ecomskugenerator_domain_model_partgroup.uid=tx_ecomskugenerator_domain_model_part.part_group
			)={$PA['row']['content']}
		");
		$orderBy = 'tx_ecomskugenerator_domain_model_part.part_group, tx_ecomskugenerator_domain_model_part.sorting';
		$items = $db->exec_SELECTgetRows('*', 'tx_ecomskugenerator_domain_model_part', $addWhere, '', $orderBy);
		if ( sizeof($items) ) {
			$partGroups = [ ];
			foreach ( $items as $item ) {
				if ( $item['part_group'] && !in_array($item['part_group'], $partGroups) ) {
					if ( $row = $db->exec_SELECTgetSingleRow('title', 'tx_ecomskugenerator_domain_model_partgroup', "tx_ecomskugenerator_domain_model_partgroup.uid={$item['part_group']}") ) {
						$selItems[] = [ $row['title'], '--div--' ];
						$partGroups[] = $item['part_group'];
					}
				}
				$selItems[] = [ $item['title'], $item['uid'] ];
			}
		} else {
			return '';
		}
		// Get values in an array (and make unique, which is fine because there can be no duplicates anyway):
		$itemArray = $PA['itemFormElValue'];
		$item = '';
		$disabled = $PA['fieldConf']['config']['readOnly'] ? ' disabled="disabled"' : '';
		$nMV_label = isset($PA['fieldTSConfig']['noMatchingValue_label']) ? $this->getLanguageService()->sL($PA['fieldTSConfig']['noMatchingValue_label']) : '[ ' . $this->getLanguageService()->getLL('l_noMatchingValue') . ' ]';

		// Split by version (TYPO3 CMS 7.3+ or below)
		if ( version_compare(TYPO3_branch, '7.3', '<') ) {
			// Get values in an array (and make unique, which is fine because there can be no duplicates anyway):
			$itemArray = CoreUtility\GeneralUtility::trimExplode(',', $itemArray, TRUE);
			foreach ( $itemArray as $tk => $tv ) {
				$tvP = explode('|', $tv, 2);
				$tvP[0] = rawurldecode($tvP[0]);
				unset($itemArray[$tk]);
				$itemArray[] = $tvP[0];
			};
			$tRows = [ ];
			$c = 0;
			$i = 0;
			if ( !strlen($disabled) ) {
				$sOnChange = implode('', $PA['fieldChangeFunc']);
				// Used to accumulate the JS needed to restore the original selection.
				foreach ( $selItems as $p ) {
					// Non-selectable element:
					if ( $p[1] === '--div--' ) {
						$tRows[] = '<tr class="c-header"><td colspan="3">' . htmlspecialchars($p[0]) . '</td></tr>';
						$c++;
						$i = 0;
					} else {
						// Selected or not by default:
						$sM = '';
						if ( is_array($itemArray) && in_array($p[1], $itemArray) ) {
							$sM = ' checked="checked"';
							if( ($key = array_search($p[1], $itemArray)) !== FALSE ) {
								unset($itemArray[$key]);
							}
						}debug($sM);
						// Compile row:
						$rowId = uniqid('select_checkbox_row_');
						$onClickCell = "document.editform['{$PA['itemFormElName']}[{$c}]'][{$i}].checked=1;";
						$onClick = "this.attributes.getNamedItem('class').nodeValue = document.editform['{$PA['itemFormElName']}[{$c}]'][{$i}].checked ? 'c-selectedItem' : 'c-unselectedItem';";
						$restoreCmd[] = "document.editform['{$PA['itemFormElName']}[{$c}]'][{$i}].checked=" . ($sM ? 1 : 0) . ";$('{$rowId}').removeClassName('c-selectedItem');$('{$rowId}').removeClassName('c-unselectedItem');$('{$rowId}').addClassName('c-" . ($sM ? '' : 'un') . "selectedItem');";
						$label = htmlspecialchars($p[0], ENT_COMPAT, 'UTF-8', FALSE);
						$tRows[] = ('
							<tr id="' . $rowId . '" class="' . ($sM ? 'c-selectedItem' : 'c-unselectedItem') . '" onclick="' . htmlspecialchars($onClick) . '" style="cursor: pointer;">
								<td class="c-checkbox"><input type="radio"' . $pObj->insertDefStyle('check') . ' name="' . htmlspecialchars(($PA['itemFormElName'] . '[' . $c . ']')) . '" value="' . htmlspecialchars($p[1]) . '"' . $sM . ' onclick="' . htmlspecialchars($sOnChange) . '"' . $PA['onFocus'] . ' /></td>
								<td class="c-labelCell" onclick="' . htmlspecialchars($onClickCell) . '"><img src="' . CoreUtility\ExtensionManagementUtility::extRelPath('ecom_config_code_generator') . 'Resources/Public/Icons/tx_ecomconfigcodegenerator_domain_model_part.png" height="16" width="16">' . $label . '</td>
								<td class="c-descr" onclick="' . htmlspecialchars($onClickCell) . '">' . (empty($help) ? '' : $help) . '</td>
							</tr>
						');
						$i++;
					}
				}
			}
			// Remaining values (invalid):
			if (count($itemArray) && !$PA['fieldTSConfig']['disableNoMatchingValueElement'] && !$PA['fieldConf']['config']['disableNoMatchingValueElement']) {
				foreach ($itemArray as $theNoMatchValue => $temp) {
					// Compile <checkboxes> tag:
					array_unshift($tRows, ('
						<tr class="c-invalidItem">
							<td class="c-checkbox"><input type="checkbox"' . $pObj->insertDefStyle('check') . ' name="' . htmlspecialchars(($PA['itemFormElName'] . '[' . $c . ']')) . '" value="' . htmlspecialchars($theNoMatchValue) . '" checked="checked" onclick="' . htmlspecialchars($sOnChange) . '"' . $PA['onFocus'] . $disabled . ' /></td>
							<td class="c-labelCell">' . htmlspecialchars(@sprintf($nMV_label, $theNoMatchValue), ENT_COMPAT, 'UTF-8', FALSE) . '</td><td>&nbsp;</td>
						</tr>
					'));
					$c++;
				}
			}
			// Add an empty hidden field which will send a blank value if all items are unselected.
			$item .= '<input type="hidden" class="select-checkbox" name="' . htmlspecialchars($PA['itemFormElName']) . '" value="" />';
			// Remaining checkboxes will get their set-all link:
			// Implode rows in table:
			$item .= '
			<table border="0" cellpadding="0" cellspacing="0" class="typo3-TCEforms-select-checkbox"><tbody>' . implode('', $tRows) . '</tbody>
			</table>
			';
			// Add revert icon
			if (is_array($restoreCmd)) {
			$item .= '<a href="#" onclick="' . implode('', $restoreCmd) . ' return false;' . '">' . BackendUtility\IconUtility::getSpriteIcon('actions-edit-undo', array('title' => htmlspecialchars($pObj->getLL('l_revertSelection')))) . '</a>';
			}
		} else {
			// TYPO3 7.3+
			$tRows = [ ];
			$c = -1;
			$i = 0;
			if ( !strlen($disabled) ) {
				$sOnChange = implode('', $PA['fieldChangeFunc']);
				foreach ( $selItems as $p ) {
					// Non-selectable element:
					if ( $p[1] === '--div--' ) {
						$tRows[] = '<tr class="c-header"><td colspan="3"><b>' . htmlspecialchars($p[0]) . '</b></td></tr>';
						$c++;
						$i = 0;
					} else {
						// Selected or not by default:
						$sM = '';
						if ( is_array($itemArray) && in_array($p[1], $itemArray) ) {
							$sM = ' checked="checked"';
						}
						// Compile row:
						$rowId = uniqid('select_checkbox_row_');
						$restoreCmd[] = "document.editform['{$PA['itemFormElName']}[{$c}]'][{$i}].checked=" . (strlen($sM) ? 1 : 0) . ";";
						$label = htmlspecialchars($p[0], ENT_COMPAT, 'UTF-8', FALSE);
						$tRows[] = ('
							<tr class="">
								<td class="col-checkbox"><input type="radio" id="' . $rowId . '" name="' . htmlspecialchars(($PA['itemFormElName'] . '[' . $c . ']')) . '" value="' . htmlspecialchars($p[1]) . '"' . $sM . ' onclick="' . htmlspecialchars($sOnChange) . '" /></td>
								<td class="col-icon">
									<label class="label-block" for="' . $rowId . '">
										<span alt="" title="">
											<span class="icon icon-size-small icon-state-default icon-tcarecords-tx_ecomskugenerator_domain_model_part-default">
												<span class="icon-markup">
													<img src="' . CoreUtility\ExtensionManagementUtility::extRelPath('ecom_config_code_generator') . 'Resources/Public/Icons/tx_ecomconfigcodegenerator_domain_model_part.png" height="16" width="16">
												</span>
											</span>
										</span>
									</label>
								</td>
								<td class="col-title"><label class="label-block" for="' . $rowId . '">' . $label . '</label></td>
							</tr>
						');
						$i++;
					}
				}
			}
			$tableHead = ('
				<thead>
					<tr>
						<th class="col-checkbox"></th>
						<th class="col-icon"></th>
						<th class="text-right" colspan="2">
							<a href="#" class="btn btn-default" onclick="' . implode('', $restoreCmd) . ' return false;' . '">
								<span class="icon icon-size-small icon-state-default icon-actions-edit-undo">
									<span class="icon-markup">
										<span class="icon-unify"><i class="fa fa-undo"></i></span>
									</span>
								</span>' . $this->getLanguageService()->getLL('l_revertSelection') . '
							</a>
						</th>
					</tr>
				</thead>
			');
			// Implode rows in table:
			$item .= '<table class="table table-transparent table-hover">' . $tableHead . '<tbody>' . implode('', $tRows) . '</tbody></table>';
		}
		return $item;
	}

	/**
	 * itemsProcFuncEcomSkuGeneratorDomainModelDependentNoteDependentParts function.
	 *
	 * @param array                                    $PA
	 * @param \TYPO3\CMS\Backend\Form\DataPreprocessor $pObj
	 *
	 * @return void
	 */
	public function itemsProcFuncEcomSkuGeneratorDomainModelDependentNoteDependentParts(array &$PA, $pObj = NULL)  {
		// Adding an item!
		//$PA['items'][] = array($pObj->sL('Added label by PHP function|Tilfjet Dansk tekst med PHP funktion'), 999);

		if ( sizeof($PA['items']) ) {
			$partGroupsCollection = [ ];

			/** @var \TYPO3\CMS\Core\Database\DatabaseConnection $db */
			$db = $GLOBALS['TYPO3_DB'];
			$partGroups = [ ];
			$result = $db->exec_SELECTquery('uid', 'tx_ecomconfigcodegenerator_domain_model_partgroup', "pid={$PA['row']['pid']}");
			while ( $row = $db->sql_fetch_assoc($result) ) {
				$partGroups[] = $row['uid'];
			}
			$db->sql_free_result($result);

			foreach ( $PA['items'] as $item ) {
				$data = BackendUtility\BackendUtility::getRecord('tx_ecomconfigcodegenerator_domain_model_part', $item[1], '*');
				if ( !sizeof($data) || !CoreUtility\GeneralUtility::inList(implode(',', $partGroups), $data['part_group']) ) {
					continue;
				}

				$item[2] = 'clear.gif';
				$partGroupsCollection[0]['div'] = '-- not assigned --';
				if ( CoreUtility\MathUtility::canBeInterpretedAsInteger($data['part_group']) ) {
					if ( !array_key_exists($data['part_group'], $partGroupsCollection) ) {
						$partGroup = BackendUtility\BackendUtility::getRecord('tx_ecomconfigcodegenerator_domain_model_partgroup', $data['part_group'], 'title');
						$partGroupsCollection[$data['part_group']]['div'] = $partGroup['title'];
					}
					$partGroupsCollection[$data['part_group']]['items'][] = $item;
				} else {
					$partGroupsCollection[0]['items'][] = $item;
				}

			}
			//usort($configurationPackages, 'self::cmp'); // Sort Alphabetically @package label
			ksort($partGroupsCollection); // Order by uid @package

			$PA['items'] = [ ];
			foreach ( $partGroupsCollection as $partGroup ) {
				if ( !is_array($partGroup['items']) ) {
					continue;
				}
				$PA['items'][] = [
					$partGroup['div'],
					'--div--'
				];
				$PA['items'] = array_merge($PA['items'], $partGroup['items']);
			}
		} elseif ( !$PA['row']['part_groups'] ) {
			$PA['items'] = [ ];
		}

		// No return - the $PA and $pObj variables are passed by reference, so just change content in then and it is passed back automatically...
	}

	/**
	 * Check if pricing is fixed or percentage
	 *
	 * @param array $PA
	 *
	 * @return boolean
	 */
	public function checkPriceHandling($PA) {
		$partGroup = BackendUtility\BackendUtility::getRecord('tx_ecomconfigcodegenerator_domain_model_partgroup', $PA['record']['part_group'], 'settings');
		$check = ($partGroup['settings'] & Setup::BIT_PARTGROUP_USE_PERCENTAGE_PRICING) === Setup::BIT_PARTGROUP_USE_PERCENTAGE_PRICING;

		switch ( $PA['conditionParameters'][0] ) {
			case '1':
				return !$check;
			default:
				return $check;
		}
	}

	/**
	 * @return \TYPO3\CMS\Lang\LanguageService
	 */
	protected function getLanguageService() {
		return $GLOBALS['LANG'];
	}

	/**
	 * @return \TYPO3\CMS\Core\Database\DatabaseConnection
	 */
	private function getDatabaseConnection() {
		return $GLOBALS['TYPO3_DB'];
	}

}

?>